{"ast":null,"code":"// The base URL for your backend API\nconst API_BASE_URL='http://localhost:4000/api';/**\r\n * A centralized request function to handle all API calls.\r\n * It automatically adds the JWT Authorization header if a token exists.\r\n * @param {string} endpoint - The API endpoint to call (e.g., '/login').\r\n * @param {object} options - Configuration for the fetch request (method, body, etc.).\r\n * @returns {Promise<any>} The JSON response from the server.\r\n * @throws {Error} Throws an error if the network request fails or the server returns an error.\r\n */const request=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// Retrieve the token from local storage on each request\nconst token=localStorage.getItem('token');const headers={'Content-Type':'application/json',...options.headers};// If a token exists, add it to the Authorization header\nif(token){headers['Authorization']=`Bearer ${token}`;}try{const response=await fetch(`${API_BASE_URL}${endpoint}`,{...options,headers});// Handle cases where the server might not return JSON (e.g., server down)\nconst contentType=response.headers.get('content-type');if(!contentType||!contentType.includes('application/json')){// Attempt to get text for better error logging\nconst errorText=await response.text();console.error(\"Server returned a non-JSON response:\",errorText);throw new Error('Server response was not in the expected JSON format.');}const responseData=await response.json();if(!response.ok){// Use the server's error message if available, otherwise a generic one\nthrow new Error(responseData.message||'An unknown API error occurred.');}return responseData;}catch(error){console.error(`API request to ${endpoint} failed:`,error);// Re-throw the error so it can be caught by the calling component (e.g., in a try/catch block)\nthrow error;}};/**\r\n * Logs in a user.\r\n * @param {string} email - The user's email.\r\n * @param {string} password - The user's password.\r\n */export const loginUser=(email,password)=>{return request('/login',{method:'POST',body:JSON.stringify({email,password})});};/**\r\n * **FIXED**: This function is for the public-facing registration page.\r\n * It assumes the page provides separate firstName and lastName fields.\r\n * @param {object} userData - Raw user data, expected to include { firstName, lastName, email, password }.\r\n */export const registerUser=userData=>{return request('/register',{method:'POST',body:JSON.stringify(userData)});};/**\r\n * **NEW**: This function is for the company registration page.\r\n * It sends all form data to the new company registration endpoint.\r\n * @param {object} companyData - Raw form data from the RegistrationPage.\r\n */export const registerCompany=companyData=>{return request('/registerCompany',{method:'POST',body:JSON.stringify(companyData)});};/**\r\n * This function is for the Admin Dashboard to create hosts from a single 'name' field.\r\n * It correctly structures the name into firstName and lastName for the backend.\r\n * Now requires authentication as only admins can create users under their company.\r\n * @param {object} userData - Must contain name, email, and password.\r\n */export const createUser=userData=>{const[firstName,...lastNameParts]=userData.name.split(' ');const lastName=lastNameParts.join(' ');const registrationData={firstName,lastName,email:userData.email,password:userData.password};return request('/register',{method:'POST',body:JSON.stringify(registrationData)});};/**\r\n * Fetches all users (admin only).\r\n */export const getUsers=()=>{return request('/users');};/**\r\n * Fetches all hosts from the current user's company.\r\n * This is used for the host dropdown in visitor check-in forms.\r\n */export const getHosts=()=>{return request('/hosts');};/**\r\n * Fetches visits based on the user's role.\r\n * - 'admin' role fetches from /visits and can use all filters.\r\n * - 'host' role fetches from /host-visits.\r\n * @param {string} role - The role of the logged-in user ('admin' or 'host').\r\n * @param {object} filters - Optional filters for the query (e.g., { hostName: 'John' }).\r\n */export const getVisits=function(role){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const params=new URLSearchParams(filters);// Choose the correct endpoint based on the user's role\nconst endpoint=role==='admin'?'/visits':'/host-visits';return request(`${endpoint}?${params.toString()}`);};/**\r\n * Creates a new visit record (check-in).\r\n * @param {object} checkInData - The data for the new visit.\r\n */export const checkInVisitor=checkInData=>{return request('/visits',{method:'POST',body:JSON.stringify(checkInData)});};/**\r\n * Checks out a visit.\r\n * @param {number|string} visitId - The ID of the visit to check out.\r\n */export const checkOutVisit=visitId=>{return request(`/visits/${visitId}/checkout`,{method:'PUT'});};","map":{"version":3,"names":["API_BASE_URL","request","endpoint","options","arguments","length","undefined","token","localStorage","getItem","headers","response","fetch","contentType","get","includes","errorText","text","console","error","Error","responseData","json","ok","message","loginUser","email","password","method","body","JSON","stringify","registerUser","userData","registerCompany","companyData","createUser","firstName","lastNameParts","name","split","lastName","join","registrationData","getUsers","getHosts","getVisits","role","filters","params","URLSearchParams","toString","checkInVisitor","checkInData","checkOutVisit","visitId"],"sources":["C:/Users/sohan/Desktop/Actually Working/Visitor_management V2/Frontend/src/utils/apiService.js"],"sourcesContent":["// The base URL for your backend API\r\nconst API_BASE_URL = 'http://localhost:4000/api';\r\n\r\n/**\r\n * A centralized request function to handle all API calls.\r\n * It automatically adds the JWT Authorization header if a token exists.\r\n * @param {string} endpoint - The API endpoint to call (e.g., '/login').\r\n * @param {object} options - Configuration for the fetch request (method, body, etc.).\r\n * @returns {Promise<any>} The JSON response from the server.\r\n * @throws {Error} Throws an error if the network request fails or the server returns an error.\r\n */\r\nconst request = async (endpoint, options = {}) => {\r\n  // Retrieve the token from local storage on each request\r\n  const token = localStorage.getItem('token');\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    ...options.headers,\r\n  };\r\n  \r\n  // If a token exists, add it to the Authorization header\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n\r\n    // Handle cases where the server might not return JSON (e.g., server down)\r\n    const contentType = response.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/json')) {\r\n        // Attempt to get text for better error logging\r\n        const errorText = await response.text();\r\n        console.error(\"Server returned a non-JSON response:\", errorText);\r\n        throw new Error('Server response was not in the expected JSON format.');\r\n    }\r\n\r\n    const responseData = await response.json();\r\n\r\n    if (!response.ok) {\r\n        // Use the server's error message if available, otherwise a generic one\r\n        throw new Error(responseData.message || 'An unknown API error occurred.');\r\n    }\r\n\r\n    return responseData;\r\n  } catch (error) {\r\n    console.error(`API request to ${endpoint} failed:`, error);\r\n    // Re-throw the error so it can be caught by the calling component (e.g., in a try/catch block)\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Logs in a user.\r\n * @param {string} email - The user's email.\r\n * @param {string} password - The user's password.\r\n */\r\nexport const loginUser = (email, password) => {\r\n  return request('/login', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n};\r\n\r\n/**\r\n * **FIXED**: This function is for the public-facing registration page.\r\n * It assumes the page provides separate firstName and lastName fields.\r\n * @param {object} userData - Raw user data, expected to include { firstName, lastName, email, password }.\r\n */\r\nexport const registerUser = (userData) => {\r\n  return request('/register', {\r\n    method: 'POST',\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n/**\r\n * **NEW**: This function is for the company registration page.\r\n * It sends all form data to the new company registration endpoint.\r\n * @param {object} companyData - Raw form data from the RegistrationPage.\r\n */\r\nexport const registerCompany = (companyData) => {\r\n    return request('/registerCompany', {\r\n        method: 'POST',\r\n        body: JSON.stringify(companyData),\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * This function is for the Admin Dashboard to create hosts from a single 'name' field.\r\n * It correctly structures the name into firstName and lastName for the backend.\r\n * Now requires authentication as only admins can create users under their company.\r\n * @param {object} userData - Must contain name, email, and password.\r\n */\r\nexport const createUser = (userData) => {\r\n  const [firstName, ...lastNameParts] = userData.name.split(' ');\r\n  const lastName = lastNameParts.join(' ');\r\n\r\n  const registrationData = {\r\n    firstName,\r\n    lastName,\r\n    email: userData.email,\r\n    password: userData.password,\r\n  };\r\n\r\n  return request('/register', {\r\n    method: 'POST',\r\n    body: JSON.stringify(registrationData),\r\n  });\r\n};\r\n\r\n/**\r\n * Fetches all users (admin only).\r\n */\r\nexport const getUsers = () => {\r\n  return request('/users');\r\n};\r\n\r\n/**\r\n * Fetches all hosts from the current user's company.\r\n * This is used for the host dropdown in visitor check-in forms.\r\n */\r\nexport const getHosts = () => {\r\n  return request('/hosts');\r\n};\r\n\r\n/**\r\n * Fetches visits based on the user's role.\r\n * - 'admin' role fetches from /visits and can use all filters.\r\n * - 'host' role fetches from /host-visits.\r\n * @param {string} role - The role of the logged-in user ('admin' or 'host').\r\n * @param {object} filters - Optional filters for the query (e.g., { hostName: 'John' }).\r\n */\r\nexport const getVisits = (role, filters = {}) => {\r\n  const params = new URLSearchParams(filters);\r\n  \r\n  // Choose the correct endpoint based on the user's role\r\n  const endpoint = role === 'admin' ? '/visits' : '/host-visits';\r\n\r\n  return request(`${endpoint}?${params.toString()}`);\r\n};\r\n\r\n/**\r\n * Creates a new visit record (check-in).\r\n * @param {object} checkInData - The data for the new visit.\r\n */\r\nexport const checkInVisitor = (checkInData) => {\r\n  return request('/visits', {\r\n    method: 'POST',\r\n    body: JSON.stringify(checkInData),\r\n  });\r\n};\r\n\r\n/**\r\n * Checks out a visit.\r\n * @param {number|string} visitId - The ID of the visit to check out.\r\n */\r\nexport const checkOutVisit = (visitId) => {\r\n  return request(`/visits/${visitId}/checkout`, {\r\n    method: 'PUT',\r\n  });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
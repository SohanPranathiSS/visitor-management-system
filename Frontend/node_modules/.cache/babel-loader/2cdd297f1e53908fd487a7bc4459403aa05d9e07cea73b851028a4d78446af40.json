{"ast":null,"code":"// Filename: src/utils/apiService.js\n\nconst API_BASE_URL = 'http://localhost:4000/api'; // Your backend server URL\n\n/**\r\n * A helper function to handle API requests and errors.\r\n * @param {string} endpoint - The API endpoint to call (e.g., '/login').\r\n * @param {object} options - The options object for the fetch call (method, headers, body).\r\n * @returns {Promise<any>} - The JSON response from the server.\r\n */\nconst request = async (endpoint, options = {}) => {\n  // Add the auth token to headers if it exists\n  const token = localStorage.getItem('token');\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    ...options,\n    headers\n  });\n  const responseData = await response.json();\n  if (!response.ok) {\n    // If the server returns an error, throw it so components can catch it.\n    throw new Error(responseData.message || 'An unknown error occurred.');\n  }\n  return responseData;\n};\n\n// --- API Functions ---\n\nexport const loginUser = (email, password) => {\n  return request('/login', {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n};\nexport const registerUser = userData => {\n  return request('/register', {\n    method: 'POST',\n    body: JSON.stringify(userData)\n  });\n};\nexport const getUsers = () => {\n  return request('/users');\n};\nexport const getVisits = (filters = {}) => {\n  // Convert filter object to URL query parameters\n  const params = new URLSearchParams(filters);\n  return request(`/visits?${params.toString()}`);\n};\nexport const checkInVisitor = checkInData => {\n  return request('/visits', {\n    method: 'POST',\n    body: JSON.stringify(checkInData)\n  });\n};\nexport const checkOutVisit = visitId => {\n  return request(`/visits/${visitId}/checkout`, {\n    method: 'PUT'\n  });\n};","map":{"version":3,"names":["API_BASE_URL","request","endpoint","options","token","localStorage","getItem","headers","response","fetch","responseData","json","ok","Error","message","loginUser","email","password","method","body","JSON","stringify","registerUser","userData","getUsers","getVisits","filters","params","URLSearchParams","toString","checkInVisitor","checkInData","checkOutVisit","visitId"],"sources":["C:/Users/sohan/Desktop/Working/Visitor_management Setting Up Database/Frontend/src/utils/apiService.js"],"sourcesContent":["// Filename: src/utils/apiService.js\r\n\r\nconst API_BASE_URL = 'http://localhost:4000/api'; // Your backend server URL\r\n\r\n/**\r\n * A helper function to handle API requests and errors.\r\n * @param {string} endpoint - The API endpoint to call (e.g., '/login').\r\n * @param {object} options - The options object for the fetch call (method, headers, body).\r\n * @returns {Promise<any>} - The JSON response from the server.\r\n */\r\nconst request = async (endpoint, options = {}) => {\r\n  // Add the auth token to headers if it exists\r\n  const token = localStorage.getItem('token');\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    ...options.headers,\r\n  };\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n  \r\n  const responseData = await response.json();\r\n\r\n  if (!response.ok) {\r\n    // If the server returns an error, throw it so components can catch it.\r\n    throw new Error(responseData.message || 'An unknown error occurred.');\r\n  }\r\n\r\n  return responseData;\r\n};\r\n\r\n// --- API Functions ---\r\n\r\nexport const loginUser = (email, password) => {\r\n  return request('/login', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n};\r\n\r\nexport const registerUser = (userData) => {\r\n  return request('/register', {\r\n    method: 'POST',\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const getUsers = () => {\r\n    return request('/users');\r\n};\r\n\r\nexport const getVisits = (filters = {}) => {\r\n    // Convert filter object to URL query parameters\r\n    const params = new URLSearchParams(filters);\r\n    return request(`/visits?${params.toString()}`);\r\n};\r\n\r\nexport const checkInVisitor = (checkInData) => {\r\n    return request('/visits', {\r\n        method: 'POST',\r\n        body: JSON.stringify(checkInData)\r\n    });\r\n};\r\n\r\nexport const checkOutVisit = (visitId) => {\r\n  return request(`/visits/${visitId}/checkout`, {\r\n    method: 'PUT',\r\n  });\r\n};"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAG,2BAA2B,CAAC,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAChD;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,GAAGJ,OAAO,CAACI;EACb,CAAC;EACD,IAAIH,KAAK,EAAE;IACTG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EAC9C;EAEA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,YAAY,GAAGE,QAAQ,EAAE,EAAE;IAAE,GAAGC,OAAO;IAAEI;EAAQ,CAAC,CAAC;EAEnF,MAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAE1C,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,KAAK,CAACH,YAAY,CAACI,OAAO,IAAI,4BAA4B,CAAC;EACvE;EAEA,OAAOJ,YAAY;AACrB,CAAC;;AAED;;AAEA,OAAO,MAAMK,SAAS,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC5C,OAAOhB,OAAO,CAAC,QAAQ,EAAE;IACvBiB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,YAAY,GAAIC,QAAQ,IAAK;EACxC,OAAOtB,OAAO,CAAC,WAAW,EAAE;IAC1BiB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,QAAQ;EAC/B,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC1B,OAAOvB,OAAO,CAAC,QAAQ,CAAC;AAC5B,CAAC;AAED,OAAO,MAAMwB,SAAS,GAAGA,CAACC,OAAO,GAAG,CAAC,CAAC,KAAK;EACvC;EACA,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAACF,OAAO,CAAC;EAC3C,OAAOzB,OAAO,CAAC,WAAW0B,MAAM,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC;AAClD,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIC,WAAW,IAAK;EAC3C,OAAO9B,OAAO,CAAC,SAAS,EAAE;IACtBiB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACU,WAAW;EACpC,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIC,OAAO,IAAK;EACxC,OAAOhC,OAAO,CAAC,WAAWgC,OAAO,WAAW,EAAE;IAC5Cf,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}